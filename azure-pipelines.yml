# SurgeXT synth build script
# Bump for 1.3.0

trigger: none

variables:
  - group: mac-signing
  - name: DECODE_PERCENTS
    value: false

jobs:

- job: Build
  condition: succeeded()
  strategy:
    matrix:
      mac:
        imageName: 'macos-latest'
        isMac: true
      windows:
        imageName: 'windows-2022'
        isWindows: true
        x64: true
      windows-x86:
        imageName: 'windows-2022'
        isWindows: true
        x86: true
      linux:
        imageName: 'ubuntu-latest'
        isLinux: true
        
  pool:
    vmImage: $(imageName)

  steps:
  - checkout: none

### SETUP SECTION
  - bash: |
      set -e

      if [ "$SURGE_BRANCH" == "" ]; then
        export SURGE_LOCAL_BRANCH='main'
      else
        export SURGE_LOCAL_BRANCH="${SURGE_BRANCH/refs\/heads\/}"
      fi

      if ! [[ $SURGE_LOCAL_BRANCH =~ ^(main|release-xt/.+)$ ]]; then
        exit 1
      fi

      if [[ $SURGE_LOCAL_BRANCH =~ ^(main)$ ]]; then
        export SURGE_IS_MAIN=true
        echo "SURGE_IS_MAIN TRUE"
        echo "##vso[task.setvariable variable=SURGE_IS_MAIN]true"
        echo "##vso[task.setvariable variable=SURGE_IS_MAIN;isOutput=true]true"
      else
        export SURGE_IS_MAIN=false
        echo "SURGE_IS_MAIN FALSE"
        echo "##vso[task.setvariable variable=SURGE_IS_MAIN]false"
        echo "##vso[task.setvariable variable=SURGE_IS_MAIN;isOutput=true]false"
      fi

      echo "SURGE_BRANCH=${SURGE_BRANCH}"
      echo "SURGE_LOCAL_BRANCH=$SURGE_LOCAL_BRANCH"
      echo "##vso[task.setvariable variable=SURGE_LOCAL_BRANCH]$SURGE_LOCAL_BRANCH"
      echo "##vso[task.setvariable variable=SURGE_LOCAL_BRANCH;isOutput=true]$SURGE_LOCAL_BRANCH"


      export SURGE_VERSION="${SURGE_LOCAL_BRANCH##*/}"
      echo "SURGE_VERSION=$SURGE_VERSION"

      # get the surge code
      git clone --depth 5 --branch $SURGE_LOCAL_BRANCH https://github.com/surge-synthesizer/surge.git 
      cd surge
      
      set +e
      . ./scripts/misc/defensive-submodule.sh
      set -e

      if [ "$SURGE_VERSION" == "main" ]; then
        export SURGE_VERSION="NIGHTLY-$(date +%Y-%m-%d)-$(git rev-parse --short HEAD)"
      fi
      echo "SURGE_VERSION=$SURGE_VERSION"
      
      echo "##vso[task.setvariable variable=SURGE_VERSION;]$SURGE_VERSION"
      echo "##vso[task.setvariable variable=SURGE_VERSION;isOutput=true]$SURGE_VERSION"
    name: surge
    displayName: all - Setup Source and Version

### Do the dummy sign (macos only)
  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'dev_id.p12'
      certPwd: '$(MAC_EXPORTED_CERT_PW)'
    condition: variables.isMac

  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'inst_id.p12'
      certPwd: '$(MAC_EXPORTED_CERT_PW)'
    condition : variables.isMac

#### DO THE SURGE BUILDS

  - bash: |
      set -e
      set -x
      cd surge
      
      export VUID=$(id -u)
      export VGID=$(id -g)

      docker pull baconpaul/sst-dockerimages-ubuntu18:2
      docker create --user $VUID:$VGID --name surge-build-u18 --interactive --tty \
              --env SURGE_VERSION=${SURGE_VERSION} \
              --volume=`pwd`:/home/build/surge baconpaul/sst-dockerimages-ubuntu18:2
      docker start surge-build-u18

      docker exec surge-build-u18 bash -c "(cd /home/build/surge && ./scripts/docker-build/build.sh build --target surge-xt-distribution --parallel 6)"
      docker stop surge-build-u18

    condition: variables.isLinux
    displayName: linux - Build Surge


  - bash: |
      set -e
      cd surge
      cmake -Bbuild -D AZURE_PIPELINE=1 -D"CMAKE_OSX_ARCHITECTURES=arm64;x86_64"
      cmake --build build --config Release --target surge-xt-distribution --parallel

    displayName: macOS - Build Surge
    condition: variables.isMac
    env:
      MAC_INSTALLING_CERT: $(MAC_INSTALLING_CERT)
      MAC_SIGNING_1UPW: $(MAC_SIGNING_1UPW)
      MAC_SIGNING_CERT: $(MAC_SIGNING_CERT)
      MAC_SIGNING_ID: $(MAC_SIGNING_ID)
      MAC_SIGNING_TEAM: $(MAC_SIGNING_TEAM)


  - bash: |
      set -e

      cd surge
      mkdir -p build
      cmake -Bbuild -A x64 -DCMAKE_BUILD_TYPE=Release -D AZURE_PIPELINE=1
      #cmake -Bbuild -GNinja -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Release -D AZURE_PIPELINE=1
    condition: and(variables.isWindows, variables.x64)
    displayName: win64 - Setup Project

  - bash: |
      set -e

      cd surge
      mkdir -p build
      cmake -Bbuild -A Win32 -D AZURE_PIPELINE=1 -DCMAKE_BUILD_TYPE=Release
    condition: and(variables.isWindows, variables.x86)
    displayName: win32 - Setup Project


  - bash: |
      set -e

      cd surge
      cmake --build build --config Release --target surge-xt-distribution
    condition: variables.isWindows
    displayName: win - Build Surge

  - bash: |
      # ls -l surge/build/surge_xt_products/
      ls -l surge/build/surge-xt-dist/
    displayName: all - What was built?


  # Make the tarball
  - bash: |
      cd surge
      ./scripts/misc/build-version-override.sh
      cd ..
      tar --exclude='./surge/ignore' --exclude='./surge/.git' --exclude='./surge/build*' -czvf surge/build/surge-xt-dist/surge-src-${SURGE_VERSION}.tar.gz ./surge
      ls -al surge/build/surge-xt-dist/*.tar.gz
    condition: variables.isLinux
    displayName: linux - make tarball
    
  # Finally make the git info
  - bash: |
      mkdir -p stage_git/git_info
      cd surge
      git log -1 --pretty=format:'%h : %s - %an' > ../stage_git/git_info/git_nightly_xt_log_display
      git log -1 --pretty=format:'%h : %s%n%aD%n%an%n%n%B' > ../stage_git/git_info/git_nightly_xt_log_long_display
      git log -5 --pretty=format:'%h : %s - %an' > ../stage_git/git_info/git_nightly_xt_recent_five
      git log -1 --pretty=format:'%h' > ../stage_git/git_info/git_nightly_xt_log_hash

      cd ..
      cat stage_git/git_info/*

    condition: variables.isLinux
    displayName: Use the linux build to make git log info

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'GIT_INFO'
      targetPath: 'stage_git/'
    condition: variables.isLinux
    displayName: Publish the Git Info


  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_MAC_DIST'
      targetPath: 'surge/build/surge-xt-dist'
    condition: variables.isMac
    displayName: mac - publish mac zip

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_LIN_DIST'
      targetPath: 'surge/build/surge-xt-dist'
    condition: variables.isLinux
    displayName: linux - publish linux zip

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_DIST'
      targetPath: 'surge/build/surge-xt-dist'
    condition: and(variables.isWindows, variables.x64)
    displayName: win64 - publish windows zip

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_X86_DIST'
      targetPath: 'surge/build/surge-xt-dist'
    condition: and(variables.isWindows, variables.x86)
    displayName: win32 - publish installer


- job: Release
  dependsOn: Build
  condition: succeeded()
  strategy:
    matrix:
      release-on-mac:
        imageName: 'macos-10.15'

  variables:
    SURGE_VERSION: $[ dependencies.Build.outputs['mac.surge.SURGE_VERSION'] ]
    SURGE_LOCAL_BRANCH: $[ dependencies.Build.outputs['mac.surge.SURGE_LOCAL_BRANCH'] ]
    SURGE_IS_MAIN: $[ dependencies.Build.outputs['mac.surge.SURGE_IS_MAIN'] ]
    INSTALL_TO_NIGHTLY: $[ eq( variables.SURGE_IS_MAIN, 'true') ]

  steps:
  - checkout: self
    persistCredentials: true

  - task: DownloadSecureFile@1
    inputs:
      secureFile: discord-nightly.webhook

  - task: DownloadSecureFile@1
    inputs:
      secureFile: checkout-website.sh

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_MAC_DIST'
      targetPath: $(System.DefaultWorkingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_DIST'
      targetPath: $(System.DefaultWorkingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_X86_DIST'
      targetPath: $(System.DefaultWorkingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_LIN_DIST'
      targetPath: $(System.DefaultWorkingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'GIT_INFO'
      targetPath: $(System.DefaultWorkingDirectory)

  - bash: |
      set -e
      set -x

      echo "SURGE_VERSION: $SURGE_VERSION"
      echo "SURGE_LOCAL_BRANCH: $SURGE_LOCAL_BRANCH"
      echo "SURGE_IS_MAIN: $SURGE_IS_MAIN"
      echo "INSTALL_TO_NIGHTLY: $INSTALL_TO_NIGHTLY"

      mkdir -p releases
      ls $(System.DefaultWorkingDirectory)/git_info
      
      mv *.zip *.exe *.dmg *.deb *.gz *.rpm releases

      echo "Surge XT ${SURGE_VERSION}" > releases/ReleaseNotes.md
      echo " " >> releases/ReleaseNotes.md
      echo "<pre>" >> releases/ReleaseNotes.md
      cat $(System.DefaultWorkingDirectory)/git_info/git_nightly_xt_recent_five >> releases/ReleaseNotes.md
      echo " " >> releases/ReleaseNotes.md
      echo "</pre>" >> releases/ReleaseNotes.md

      echo "---------------"
      cat releases/ReleaseNotes.md
      echo "---------------"

      ls -alFh releases
    displayName: Prepare Release

  - task: GitHubRelease@0
    displayName: "Create Github Nightly Release"
    condition: eq(variables.SURGE_IS_MAIN, 'true')
    inputs:
      gitHubConnection: surge-rackupdater
      repositoryName: surge-synthesizer/releases-xt
      action: 'edit'
      tag: Nightly
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      assetUploadMode: 'delete'
      releaseNotesFile: $(System.DefaultWorkingDirectory)/releases/ReleaseNotes.md
      assets: $(System.DefaultWorkingDirectory)/releases/*.*

  - bash: |
       git tag $(SURGE_VERSION)
       git push origin $(SURGE_VERSION)
    displayName: "Create Github Tag for Stable"
    condition: eq(variables.SURGE_IS_MAIN, 'false')

  - task: GitHubRelease@0
    displayName: "Create Github Stable Release"
    condition: eq(variables.SURGE_IS_MAIN, 'false')
    inputs:
      gitHubConnection: surge-rackupdater
      repositoryName: surge-synthesizer/releases-xt
      action: 'create'
      tag: $(SURGE_VERSION)
      tagSource: 'auto'
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      assetUploadMode: 'delete'
      releaseNotesFile: $(System.DefaultWorkingDirectory)/releases/ReleaseNotes.md
      assets: $(System.DefaultWorkingDirectory)/releases/*.*


  - bash: |
      . $AGENT_TEMPDIRECTORY/checkout-website.sh 

      pushd surge-synthesizer.github.io

      if [ "$SURGE_LOCAL_BRANCH" == "main" ]; then
        echo $(date "+%Y-%m-%d %H:%M:%S %Z") > src/assets/includes/latest_xt_build_time
        echo $SURGE_VERSION > src/assets/includes/latest_xt_version
        cp ../git_info/* src/assets/includes
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/Nightly/surge-xt-macOS-$SURGE_VERSION.dmg > src/assets/includes/latest_xt_macos_url
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/Nightly/surge-xt-win64-$SURGE_VERSION-setup.exe > src/assets/includes/latest_xt_win_x64_url
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/Nightly/surge-xt-win64-$SURGE_VERSION-pluginsonly.zip > src/assets/includes/latest_xt_win_x64_zip_url
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/Nightly/surge-xt-win32-$SURGE_VERSION-setup.exe > src/assets/includes/latest_xt_win_x86_url
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/Nightly/surge-xt-win32-$SURGE_VERSION-pluginsonly.zip > src/assets/includes/latest_xt_win_x86_zip_url
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/Nightly/surge-xt-linux-x64-$SURGE_VERSION.deb > src/assets/includes/latest_xt_linux_x64_url
      else
        echo $(date "+%Y-%m-%d %H:%M:%S %Z") > src/assets/includes/stable_xt_build_time
        echo $SURGE_VERSION > src/assets/includes/stable_xt_version
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/$SURGE_VERSION/surge-xt-macOS-$SURGE_VERSION.dmg > src/assets/includes/stable_xt_macos_url
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/$SURGE_VERSION/surge-xt-win64-$SURGE_VERSION-setup.exe > src/assets/includes/stable_xt_win_x64_url
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/$SURGE_VERSION/surge-xt-win64-$SURGE_VERSION-pluginsonly.zip > src/assets/includes/stable_xt_win_x64_zip_url
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/$SURGE_VERSION/surge-xt-win32-$SURGE_VERSION-setup.exe > src/assets/includes/stable_xt_win_x86_url
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/$SURGE_VERSION/surge-xt-win32-$SURGE_VERSION-pluginsonly.zip > src/assets/includes/stable_xt_win_x86_zip_url
        echo https://github.com/surge-synthesizer/releases-xt/releases/download/$SURGE_VERSION/surge-xt-linux-x64-$SURGE_VERSION.deb > src/assets/includes/stable_xt_linux_x64_url
        echo https://github.com/surge-synthesizer/releases-xt/releases/tag/$SURGE_VERSION > src/assets/includes/stable_xt_other.url
      fi

      git diff
      git add src/assets/includes
      git commit -m "Update releases for $SURGE_VERSION"
      git push
    displayName: Update Website

  - bash: |
      # Finally tell discord
      export GIT_LOG_DISP=`cat git_info/git_nightly_xt_log_display  | sed -e s/\"//g`
      curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"A SurgeXT Beta Build is available. Get it here:\n*${SURGE_VERSION}*\n${GIT_LOG_DISP}\nhttps://surge-synthesizer.github.io/nightly_XT\"}" `cat $AGENT_TEMPDIRECTORY/discord-nightly.webhook`
    displayName: Tell Discord
